--- arch/arm/mach-msm/cpufreq.c	2013-04-19 11:37:14.000000000 +0200
+++ arch/arm/mach-msm/cpufreq.c	2014-08-29 08:20:15.292248000 +0200
@@ -51,6 +51,40 @@
 static DEFINE_PER_CPU(struct cpufreq_suspend_t, cpufreq_suspend);
 
 static int override_cpu;
+#ifdef CONFIG_SEC_DVFS
+static unsigned int upper_limit_freq;
+static unsigned int lower_limit_freq;
+
+unsigned int get_min_lock(void)
+{
+	return lower_limit_freq;
+}
+
+unsigned int get_max_lock(void)
+{
+	return upper_limit_freq;
+}
+
+void set_min_lock(int freq)
+{
+	if (freq <= MIN_FREQ_LIMIT)
+		lower_limit_freq = 0;
+	else if (freq > MAX_FREQ_LIMIT)
+		lower_limit_freq = 0;
+	else
+		lower_limit_freq = freq;
+}
+
+void set_max_lock(int freq)
+{
+	if (freq < MIN_FREQ_LIMIT)
+		upper_limit_freq = 0;
+	else if (freq >= MAX_FREQ_LIMIT)
+		upper_limit_freq = 0;
+	else
+		upper_limit_freq = freq;
+}
+#endif
 
 static int set_cpu_freq(struct cpufreq_policy *policy, unsigned int new_freq)
 {
@@ -63,11 +97,26 @@
 			return 0;
 		else
 			freqs.new = policy->max;
-	} else
+	}
+#ifdef CONFIG_SEC_DVFS
+	else if (lower_limit_freq || upper_limit_freq) {
+		freqs.new = new_freq;
+
+		if (lower_limit_freq && new_freq < lower_limit_freq)
+			freqs.new = lower_limit_freq;
+
+		if (upper_limit_freq && new_freq > upper_limit_freq)
+			freqs.new = upper_limit_freq;
+
+		if (freqs.new == freqs.old)
+			return 0;
+	}
+#endif
+	else
 		freqs.new = new_freq;
 	freqs.cpu = policy->cpu;
 	cpufreq_notify_transition(&freqs, CPUFREQ_PRECHANGE);
-	ret = acpuclk_set_rate(policy->cpu, new_freq, SETRATE_CPUFREQ);
+	ret = acpuclk_set_rate(policy->cpu, freqs.new, SETRATE_CPUFREQ);
 	if (!ret)
 		cpufreq_notify_transition(&freqs, CPUFREQ_POSTCHANGE);
 
@@ -304,7 +353,10 @@
 static int __init msm_cpufreq_register(void)
 {
 	int cpu;
-
+#ifdef CONFIG_SEC_DVFS
+	upper_limit_freq = 0;
+	lower_limit_freq = 0;
+#endif
 	int err = sysfs_create_file(&cpu_sysdev_class.kset.kobj,
 			&attr_mfreq.attr);
 	if (err)
