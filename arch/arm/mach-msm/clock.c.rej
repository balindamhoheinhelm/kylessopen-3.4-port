--- arch/arm/mach-msm/clock.c	2013-04-19 11:37:14.000000000 +0200
+++ arch/arm/mach-msm/clock.c	2014-08-29 08:20:15.292248000 +0200
@@ -21,6 +21,7 @@
 #include <linux/module.h>
 #include <linux/clk.h>
 #include <linux/clkdev.h>
+#include <linux/string.h>
 #include <linux/dma-mapping.h>
 
 #include "clock.h"
@@ -402,35 +412,35 @@
 	unsigned n, count = 0;
 	unsigned long flags;
 	int ret = 0;
-
 	clock_debug_init(clk_init_data);
 	for (n = 0; n < clk_init_data->size; n++) {
 		struct clk *clk = clk_init_data->table[n].clk;
 		bool handoff = false;
-
-		clock_debug_add(clk);
-		if (!(clk->flags & CLKFLAG_SKIP_AUTO_OFF)) {
-			spin_lock_irqsave(&clk->lock, flags);
-			if (!clk->count && clk->ops->auto_off) {
-				count++;
-				clk->ops->auto_off(clk);
+        if(strcmp(clk_init_data->table[n].con_id,"uart_clk")!=0)
+		{
+		  clock_debug_add(clk);
+		     if (!(clk->flags & CLKFLAG_SKIP_AUTO_OFF)) {
+			    spin_lock_irqsave(&clk->lock, flags);
+			     if (!clk->count && clk->ops->auto_off) {
+				    count++;
+				    clk->ops->auto_off(clk);
 			}
-			if (clk->flags & CLKFLAG_HANDOFF_RATE) {
+		/*	if (clk->flags & CLKFLAG_HANDOFF_RATE) {
 				clk->flags &= ~CLKFLAG_HANDOFF_RATE;
-				handoff = true;
-			}
+				handoff = true; 
+			} */
 			spin_unlock_irqrestore(&clk->lock, flags);
 			/*
 			 * Calling clk_disable() outside the lock is safe since
 			 * it doesn't need to be atomic with the flag change.
 			 */
-			if (handoff)
-				clk_disable(clk);
+		/*	if (handoff)
+				clk_disable(clk); */
 		}
+    	}
 	}
-	pr_info("clock_late_init() disabled %d unused clocks\n", count);
-	if (clk_init_data->late_init)
-		ret = clk_init_data->late_init();
-	return ret;
+/*	if (clk_init_data->late_init)
+		ret = clk_init_data->late_init(); */
+	return 0;
 }
 late_initcall(clock_late_init);
