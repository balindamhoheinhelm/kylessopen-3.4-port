--- arch/arm/mach-msm/msm_vibrator.c	2013-04-19 11:37:14.000000000 +0200
+++ arch/arm/mach-msm/msm_vibrator.c	2014-08-29 08:20:15.296248000 +0200
@@ -18,82 +18,240 @@
 #include <linux/platform_device.h>
 #include <linux/err.h>
 #include <linux/hrtimer.h>
+#include <linux/clk.h>
+#include <../../../drivers/staging/android/timed_output.h>
 #include <linux/sched.h>
-#include "pmic.h"
-#include "timed_output.h"
 
 #include <mach/msm_rpcrouter.h>
 
-#define PM_LIBPROG      0x30000061
-#if (CONFIG_MSM_AMSS_VERSION == 6220) || (CONFIG_MSM_AMSS_VERSION == 6225)
-#define PM_LIBVERS      0xfb837d0b
-#else
-#define PM_LIBVERS      0x10001
+//#include <mach/clk.h>
+#include <mach/samsung_vibe.h>
+#include <mach/gpio.h>
+#include <mach/vreg.h>
+#include <linux/delay.h>
+#include <linux/regulator/consumer.h>
+#include <linux/workqueue.h>
+#include <mach/pmic.h>
+
+struct work_struct	 vibe_work;
+
+struct clk *android_vib_clk; /* gp_clk */
+
+#define GP_CLK_M_DEFAULT			21
+#define GP_CLK_N_DEFAULT			18000
+#define GP_CLK_D_DEFAULT			9000	/* 50% duty cycle */ 
+#define IMM_PWM_MULTIPLIER		    17778	/* Must be integer */
+
+/*
+ * ** Global variables for LRA PWM M,N and D values.
+ * */
+VibeInt32 g_nLRA_GP_CLK_M = GP_CLK_M_DEFAULT;
+VibeInt32 g_nLRA_GP_CLK_N = GP_CLK_N_DEFAULT;
+VibeInt32 g_nLRA_GP_CLK_D = GP_CLK_N_DEFAULT;
+VibeInt32 g_nLRA_GP_CLK_PWM_MUL = IMM_PWM_MULTIPLIER;
+
+static struct hrtimer vibe_timer;
+static struct regulator *vreg_msm_vibrator;
+static int enabled = 0;
+
+#if defined(CONFIG_MACH_AMAZING_CDMA) || defined(CONFIG_MACH_KYLE_I)
+static int is_vibe_on;
+#endif
+
+#if defined(CONFIG_MACH_KYLE_I)
+#define VIB_ON_GPIO		111
+#endif
+
+static int msm_vibrator_suspend(struct platform_device *pdev, pm_message_t state);
+static int msm_vibrator_resume(struct platform_device *pdev);
+static int msm_vibrator_probe(struct platform_device *pdev);
+static int msm_vibrator_exit(struct platform_device *pdev);
+static int msm_vibrator_power(int power_mode);
+
+
+/* Variable for setting PWM in Force Out Set */
+VibeInt32 g_nForce_32 = 0;
+
+/*
+ * This function is used to set and re-set the GP_CLK M and N counters
+ * to output the desired target frequency.
+ * 
+ */
+
+/* for the suspend/resume VIBRATOR Module */
+static struct platform_driver msm_vibrator_platdrv = 
+{
+	.probe   = msm_vibrator_probe,
+	.suspend = msm_vibrator_suspend,
+	.resume  = msm_vibrator_resume,
+	.remove  = msm_vibrator_exit,
+	.driver = 
+	{
+		.name = MODULE_NAME,
+		.owner = THIS_MODULE,
+	},
+};
+
+static int msm_vibrator_suspend(struct platform_device *pdev, pm_message_t state)
+{
+
+#if 0
+	if(is_vibe_on) {
+		clk_disable(android_vib_clk);
+		is_vibe_on = 0;
+	}
+#endif
+#if defined(CONFIG_MACH_AMAZING_CDMA) || defined(CONFIG_MACH_KYLE_I)
+	msm_vibrator_power(VIBRATION_OFF);
 #endif
+	printk("[VIB] susepend\n");
+	return VIBE_S_SUCCESS;
+}
+
+static int msm_vibrator_resume(struct platform_device *pdev)
+{
+
+	//	msm_vibrator_power(VIBRATION_ON);
 
-#define HTC_PROCEDURE_SET_VIB_ON_OFF	21
-#define PMIC_VIBRATOR_LEVEL	(3000)
+	printk("[VIB] resume\n");
+	return VIBE_S_SUCCESS;
+}
+
+static int msm_vibrator_exit(struct platform_device *pdev)
+{
+	printk("[VIB] EXIT\n");
+	return 0;
+}
 
-static struct work_struct work_vibrator_on;
-static struct work_struct work_vibrator_off;
-static struct hrtimer vibe_timer;
 
-#ifdef CONFIG_PM8XXX_RPC_VIBRATOR
-static void set_pmic_vibrator(int on)
+static int msm_vibrator_power(int on)
 {
-	int rc;
+	int ret = 0;
+#if !defined(CONFIG_MACH_AMAZING_CDMA) && !defined(CONFIG_MACH_KYLE_I)
+	if (on) {
+#if defined(CONFIG_MACH_KYLE)
+		ret = regulator_set_voltage(vreg_msm_vibrator, 3050000, 3050000);
+#else
+		ret = regulator_set_voltage(vreg_msm_vibrator, 3000000,3000000);
+#endif
+		if (ret) {
+			printk(KERN_ERR "%s: vreg set level failed (%d)\n",
+					__func__, ret);
+			regulator_put(vreg_msm_vibrator);
+			return -EIO;
+		}
+		if (!enabled) {
+			enabled = 1;
+			ret = regulator_enable(vreg_msm_vibrator);
+		}
+		if (ret) {
+			printk(KERN_ERR "%s: vreg enable failed (%d)\n",
+					__func__, ret);
+			return -EIO;
+		}
+		mdelay(10);
+	}
+	else {
+		if (enabled) {
+			enabled = 0;
+			ret = regulator_disable(vreg_msm_vibrator);
+		}
+		if (ret) {
+			printk(KERN_ERR "%s: vreg disable failed (%d)\n",
+					__func__, ret);
+			return -EIO;
+		}
+	}
+#else
+	static int nStatus;
+	unsigned int vib_voltage = 0;
+
+	printk(KERN_DEBUG "%s on = %d nStatus = %d\n", __func__, on, nStatus);
 
-	rc = pmic_vib_mot_set_mode(PM_VIB_MOT_MODE__MANUAL);
-	if (rc) {
-		pr_err("%s: Vibrator set mode failed", __func__);
-		return;
+	if (nStatus == on)	{
+		printk(KERN_DEBUG "%s set already!\n", __func__);
+		return VIBE_E_FAIL;
+	}
+	else {
+		nStatus = on;
 	}
 
+	vib_voltage = 3100;
+
+#if defined(CONFIG_MACH_KYLE_I)
 	if (on)
-		rc = pmic_vib_mot_set_volt(PMIC_VIBRATOR_LEVEL);
+	{
+		ret = pmic_vib_mot_set_volt(vib_voltage);
+		gpio_set_value_cansleep(VIB_ON_GPIO,1);
+	}
 	else
-		rc = pmic_vib_mot_set_volt(0);
+	{
+		ret = pmic_vib_mot_set_volt(0);
+		gpio_set_value_cansleep(VIB_ON_GPIO,0);
+	}
 
-	if (rc)
-		pr_err("%s: Vibrator set voltage level failed", __func__);
+#else
+	if (on)
+		ret = pmic_vib_mot_set_volt(vib_voltage);
+	else
+		ret = pmic_vib_mot_set_volt(0);
+#endif
+	printk(KERN_DEBUG "%s status = %d\n", __func__, ret);
+#endif
+	return VIBE_S_SUCCESS;
 }
+
+
+#if 0
+static int vibe_set_pwm_freq(int nForce)
+{
+#if 1
+	/* Put the MND counter in reset mode for programming */
+	HWIO_OUTM(GP_NS_REG, HWIO_GP_NS_REG_MNCNTR_EN_BMSK, 0);
+	HWIO_OUTM(GP_NS_REG, HWIO_GP_NS_REG_PRE_DIV_SEL_BMSK, 0 << HWIO_GP_NS_REG_PRE_DIV_SEL_SHFT); /* P: 0 => Freq/1, 1 => Freq/2, 4 => Freq/4 */
+	HWIO_OUTM(GP_NS_REG, HWIO_GP_NS_REG_SRC_SEL_BMSK, 0 << HWIO_GP_NS_REG_SRC_SEL_SHFT); /* S : 0 => TXCO(19.2MHz), 1 => Sleep XTAL(32kHz) */
+	HWIO_OUTM(GP_NS_REG, HWIO_GP_NS_REG_MNCNTR_MODE_BMSK, 2 << HWIO_GP_NS_REG_MNCNTR_MODE_SHFT); /* Dual-edge mode */
+	HWIO_OUTM(GP_MD_REG, HWIO_GP_MD_REG_M_VAL_BMSK, g_nLRA_GP_CLK_M << HWIO_GP_MD_REG_M_VAL_SHFT);
+	g_nForce_32 = ((nForce * g_nLRA_GP_CLK_PWM_MUL) >> 8) + g_nLRA_GP_CLK_D;
+	//		printk("%s, g_nForce_32 : %d\n",__FUNCTION__,g_nForce_32);
+	HWIO_OUTM(GP_MD_REG, HWIO_GP_MD_REG_D_VAL_BMSK, ( ~((VibeInt16)g_nForce_32 << 1) ) << HWIO_GP_MD_REG_D_VAL_SHFT);
+	HWIO_OUTM(GP_NS_REG, HWIO_GP_NS_REG_GP_N_VAL_BMSK, ~(g_nLRA_GP_CLK_N - g_nLRA_GP_CLK_M) << HWIO_GP_NS_REG_GP_N_VAL_SHFT);
+	HWIO_OUTM(GP_NS_REG, HWIO_GP_NS_REG_MNCNTR_EN_BMSK, 1 << HWIO_GP_NS_REG_MNCNTR_EN_SHFT);                    /* Enable M/N counter */
+	printk("%x, %x, %x\n",( ~((VibeInt16)g_nForce_32 << 1) ) << HWIO_GP_MD_REG_D_VAL_SHFT,~(g_nLRA_GP_CLK_N - g_nLRA_GP_CLK_M) << HWIO_GP_NS_REG_GP_N_VAL_SHFT,1 << HWIO_GP_NS_REG_MNCNTR_EN_SHFT);
 #else
+	clk_set_rate(android_vib_clk,32583);
+#endif	
+	return VIBE_S_SUCCESS;
+}
+
+
 static void set_pmic_vibrator(int on)
 {
-	static struct msm_rpc_endpoint *vib_endpoint;
-	struct set_vib_on_off_req {
-		struct rpc_request_hdr hdr;
-		uint32_t data;
-	} req;
-
-	if (!vib_endpoint) {
-		vib_endpoint = msm_rpc_connect(PM_LIBPROG, PM_LIBVERS, 0);
-		if (IS_ERR(vib_endpoint)) {
-			printk(KERN_ERR "init vib rpc failed!\n");
-			vib_endpoint = 0;
-			return;
+	//	printk("[VIB] %s, input : %s\n",__func__,on ? "ON":"OFF");
+	if (on) {
+		clk_enable(android_vib_clk);
+		gpio_direction_output(VIB_ON, VIBRATION_ON);
+		is_vibe_on = 1;
+	} else {
+		if(is_vibe_on) {
+			gpio_direction_output(VIB_ON, VIBRATION_OFF);
+			clk_disable(android_vib_clk);
+			is_vibe_on = 0;
 		}
 	}
 
-
-	if (on)
-		req.data = cpu_to_be32(PMIC_VIBRATOR_LEVEL);
-	else
-		req.data = cpu_to_be32(0);
-
-	msm_rpc_call(vib_endpoint, HTC_PROCEDURE_SET_VIB_ON_OFF, &req,
-		sizeof(req), 5 * HZ);
 }
 #endif
 
+#if 0
 static void pmic_vibrator_on(struct work_struct *work)
 {
-	set_pmic_vibrator(1);
+	set_pmic_vibrator(VIBRATION_ON);
 }
 
 static void pmic_vibrator_off(struct work_struct *work)
 {
-	set_pmic_vibrator(0);
+	set_pmic_vibrator(VIBRATION_OFF);
 }
 
 static void timed_vibrator_on(struct timed_output_dev *sdev)
